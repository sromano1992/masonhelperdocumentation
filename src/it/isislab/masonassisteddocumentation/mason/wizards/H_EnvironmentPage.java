package it.isislab.masonassisteddocumentation.mason.wizards;

import it.isislab.masonassisteddocumentation.ODD.Entity;
import it.isislab.masonassisteddocumentation.ODD.ODD;
import it.isislab.masonassisteddocumentation.ODD.Variable;
import it.isislab.masonassisteddocumentation.mason.analizer.GlobalUtility;
import it.isislab.masonassisteddocumentation.mason.analizer.Parameter;
import it.isislab.masonassisteddocumentation.mason.analizer.SimStateAnalizer;
import it.isislab.masonassisteddocumentation.mason.wizards.MASONDocumentationWizard;

import java.util.ArrayList;
import java.util.logging.Logger;

import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.custom.ScrolledComposite;

/**
 * 
 * @author Romano Simone 0512101343
 * This page show information about SimState
 * variables that are not Fields. Then this informations
 * are about environment.
 */
public class H_EnvironmentPage extends WizardPage{
	private SimStateAnalizer simStateAnalizer;
	private Composite composite, container;
	private ScrolledComposite scrolledComposite;
	private ArrayList<Parameter> remainingParameters;
	private ArrayList<Text> inputText;
	private ArrayList<Label> autoGeneratedComment;
	private String pageDescription = "Here information about environment variables:"; 
	
	public H_EnvironmentPage() {
		super("wizardPage");
		simStateAnalizer = GlobalUtility.getSimStateAnalizer();	
		setTitle("2/7 - Entities, state variables, and scales\n" + simStateAnalizer.getClassName());
		setDescription(pageDescription);
		inputText = new ArrayList<Text>();
		autoGeneratedComment = new ArrayList<Label>();
		remainingParameters = new ArrayList<Parameter>();
	}

	
	public void createControl(Composite parent) {
		container = new Composite(parent, SWT.NULL);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		layout.verticalSpacing = 9;		
		scrolledComposite = new ScrolledComposite(container, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);			
		GridData gd_scrolledComposite = new GridData(SWT.CENTER, SWT.CENTER, false, false, 1, 1);
		gd_scrolledComposite.heightHint = 255;
		gd_scrolledComposite.widthHint = 543;
		scrolledComposite.setLayoutData(gd_scrolledComposite);
		scrolledComposite.setExpandHorizontal(true);
		scrolledComposite.setExpandVertical(true);		
		composite = new Composite(scrolledComposite, SWT.NONE);
		GridLayout gl_composite = new GridLayout();
		gl_composite.numColumns = 2;
		gl_composite.verticalSpacing = 9;
		composite.setLayout(gl_composite);
		
		setControl(container);
		scrolledComposite.setContent(composite);
		scrolledComposite.setMinSize(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT));	
		myCreateControl();
	}
	
	public void myCreateControl(){
		ArrayList<Parameter> allParameters = GlobalUtility.getAllParameters(simStateAnalizer.getCompilationUnit());
		for (Parameter p : allParameters)
			if (!(simStateAnalizer.alreadyVisited(p)))	remainingParameters.add(p);	
		
		//creating graphic layout...
		for (Parameter p : remainingParameters){
			Label lblVariable = new Label(composite, SWT.NONE);
			lblVariable.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
			lblVariable.setText(p.getVariableType() + " " + p.getVariableName());
			
			Text text = new Text(composite, SWT.BORDER | SWT.BORDER | SWT.MULTI);
			GridData gd_text = new GridData(SWT.LEFT, SWT.LEFT, true, false, 1, 1);
			gd_text.heightHint = 41;
			gd_text.widthHint = 253;
			text.setLayoutData(gd_text);

			new Label(composite, SWT.NONE);		
			Label lblInitializerDetector = new Label(composite, SWT.NONE);
			lblInitializerDetector.setText("");
			if (p.getInitializer()!="")	lblInitializerDetector.setText(Messages.OtherVar_1 + p.getVariableName() + Messages.Initializer_2 + p.getInitializer());
			
			//getting old user input if exist//
			Entity entity = ODD.getEntity(simStateAnalizer.getClassName());
			if (entity != null){
				Variable var = entity.getVariable(p.getVariableName());
				if (var != null)
					text.setText(var.getUserComment());
			}
			//******************************//
			
			Label label = new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
			GridData gd_label = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1);
			gd_label.widthHint = 545;
			label.setLayoutData(gd_label);
			
			setControl(container);
			scrolledComposite.setContent(composite);
			scrolledComposite.setMinSize(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT));	
			inputText.add(text);
			autoGeneratedComment.add(lblInitializerDetector);
		}
	}


	@Override
	public boolean canFlipToNextPage() {
		return true;
	}
	
	public boolean isPageComplete(){
		return true;
	}
	
	/**
	 * This to intercept next button click 
	 */
	public IWizardPage getNextPage(){ 
		//add comment to variable
		for (int i=0; i<inputText.size(); i++){
			if ((autoGeneratedComment.get(i).getText()!="") || (inputText.get(i).getText()!="")){	//if there is at least an autogenerated comment
				String comment = GlobalUtility.COMMENT_SIGNATURE + "@ingroup entities\n*\n" + GlobalUtility.surroundWithSpan(GlobalUtility.userOutputColor, inputText.get(i).getText()) + "\n" + GlobalUtility.surroundWithSpan(GlobalUtility.autoOutputColor, autoGeneratedComment.get(i).getText());
				GlobalUtility.setJavadocToParameter(simStateAnalizer.getRoot(), remainingParameters.get(i), comment);
				simStateAnalizer.getVisitedParameters().add(remainingParameters.get(i));
				String variableName = remainingParameters.get(i).getVariableName();
				String userComment = inputText.get(i).getText();
				String autogeneratedComment = autoGeneratedComment.get(i).getText();
				String initialValue = remainingParameters.get(i).getInitializer();
				ODD.addVariableToEntity(simStateAnalizer.getClassName(), new Variable(variableName, userComment, autogeneratedComment, initialValue));
			}
		}
		I_StartInformationPage nextPage = new I_StartInformationPage();
		((MASONDocumentationWizard) super.getWizard()).addPage(nextPage);
		return nextPage; 
	}
}