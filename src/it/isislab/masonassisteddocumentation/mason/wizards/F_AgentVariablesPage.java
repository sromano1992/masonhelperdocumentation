package it.isislab.masonassisteddocumentation.mason.wizards;

import it.isislab.masonassisteddocumentation.ODD.Entity;
import it.isislab.masonassisteddocumentation.ODD.ODD;
import it.isislab.masonassisteddocumentation.ODD.Variable;
import it.isislab.masonassisteddocumentation.mason.analizer.AgentAnalizer;
import it.isislab.masonassisteddocumentation.mason.analizer.GlobalUtility;
import it.isislab.masonassisteddocumentation.mason.analizer.Parameter;

import java.util.ArrayList;

import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.custom.ScrolledComposite;

/**
 * 
 * @author Romano Simone 0512101343
 * This page show information about 
 * Agent variables.
 */
public class F_AgentVariablesPage extends WizardPage{
	private AgentAnalizer agentAnalizer;
	private Composite composite, container;
	private ScrolledComposite scrolledComposite;
	private ArrayList<Parameter> remainingParameters;
	private ArrayList<Text> inputText;
	private ArrayList<Label> autoGeneratedComment;
	private static String pageDescription = "Here information about other variables:"; //$NON-NLS-1$
	
	public F_AgentVariablesPage() {
		super("wizardPage"); //$NON-NLS-1$
		agentAnalizer = GlobalUtility.getAgentAnalizer();
		setTitle("2/7 - Entities, state variables, and scales\n" + agentAnalizer.getClassName()); //$NON-NLS-1$
		setDescription(pageDescription);
	}

	
	public void createControl(Composite parent) {
		container = new Composite(parent, SWT.NULL);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		layout.verticalSpacing = 9;		
		scrolledComposite = new ScrolledComposite(container, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		GridData gd_scrolledComposite = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_scrolledComposite.heightHint = 255;
		gd_scrolledComposite.widthHint = 543;
		scrolledComposite.setLayoutData(gd_scrolledComposite);
		scrolledComposite.setExpandHorizontal(true);
		scrolledComposite.setExpandVertical(true);		
		composite = new Composite(scrolledComposite, SWT.NONE);
		GridLayout gl_composite = new GridLayout();
		gl_composite.numColumns = 2;
		gl_composite.verticalSpacing = 9;
		composite.setLayout(gl_composite);		
		
		setControl(container);
		scrolledComposite.setContent(composite);
		scrolledComposite.setMinSize(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT));		
		myCreateControl();
	}
	
	public void myCreateControl(){
		agentAnalizer = GlobalUtility.getAgentAnalizer();	
		inputText = new ArrayList<Text>();
		autoGeneratedComment = new ArrayList<Label>();
		remainingParameters = agentAnalizer.getNotVisitedParameter_s();
		
		//creating graphic layout...
		for (Parameter p : remainingParameters){
			Label lblVariable = new Label(composite, SWT.NONE);
			lblVariable.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
			lblVariable.setText(p.getVariableType() + " " + p.getVariableName()); //$NON-NLS-1$
			
			Text text = new Text(composite, SWT.BORDER | SWT.BORDER | SWT.MULTI);
			GridData gd_text = new GridData(SWT.LEFT, SWT.LEFT, true, false, 1, 1);
			gd_text.heightHint = 41;
			gd_text.widthHint = 253;
			text.setLayoutData(gd_text);

			new Label(composite, SWT.NONE);		
			Label lblInitializerDetector = new Label(composite, SWT.NONE);
			lblInitializerDetector.setText(""); //$NON-NLS-1$
			if (p.getInitializer()!=""){ //$NON-NLS-1$
				lblInitializerDetector.setText(Messages.OtherVar_1 + p.getVariableName() + Messages.OtherVar_2 + p.getInitializer());
			}
			
			Entity entity = ODD.getEntity(agentAnalizer.getClassName());
			Variable var = entity.getVariable(p.getVariableName());
			if (var != null)
				text.setText(var.getUserComment());
			
			Label label = new Label(composite, SWT.SEPARATOR | SWT.HORIZONTAL);
			GridData gd_label = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1);
			gd_label.widthHint = 545;
			label.setLayoutData(gd_label);
			
			setControl(container);
			scrolledComposite.setContent(composite);
			scrolledComposite.setMinSize(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT));	
			inputText.add(text);
			autoGeneratedComment.add(lblInitializerDetector);
		}
	}


	@Override
	public boolean canFlipToNextPage() {
		return true;
	}
	
	public boolean isPageComplete(){
		return true;
	}
	
	/**
	 * This to intercept next button click 
	 */
	public IWizardPage getNextPage(){ 
		//add comment to variable
		for (int i=0; i<inputText.size(); i++){
			if (!(autoGeneratedComment.get(i).getText().equals("")) || !((inputText.get(i).getText().equals("")))){	//if there is at least an autogenerated comment //$NON-NLS-1$ //$NON-NLS-2$
				String comment = GlobalUtility.COMMENT_SIGNATURE + "@ingroup entities\n*\n" + GlobalUtility.surroundWithSpan(GlobalUtility.userOutputColor, inputText.get(i).getText()) + "\n" + GlobalUtility.surroundWithSpan(GlobalUtility.autoOutputColor, autoGeneratedComment.get(i).getText()); //$NON-NLS-1$ //$NON-NLS-2$
				GlobalUtility.setJavadocToParameter(agentAnalizer.getRoot(), remainingParameters.get(i), comment);
				ODD.addVariableToEntity(agentAnalizer.getClassName(), new Variable(remainingParameters.get(i).getVariableName(), inputText.get(i).getText(), autoGeneratedComment.get(i).getText(), remainingParameters.get(i).getInitializer()));
				agentAnalizer.getVisitedParameters().add(remainingParameters.get(i));
			}
		}
		//add right page
		if (GlobalUtility.getNextAgentAnalizer() != null){
			D_AgentDescriptionPage nextPage = new D_AgentDescriptionPage();
			((MASONDocumentationWizard) super.getWizard()).addPage(nextPage);
			return nextPage;
		}
		//else go next to Grids description if simState page
		//has grids
		if (GlobalUtility.getSimStateAnalizer().getFieldsParameters().size() != 0){
			G_GridsCellPage nextPage= new G_GridsCellPage();
			((MASONDocumentationWizard) super.getWizard()).addPage(nextPage); 
			return nextPage; 
		}
		else{
			H_EnvironmentPage nextPage= new H_EnvironmentPage();
			((MASONDocumentationWizard) super.getWizard()).addPage(nextPage); 
			return nextPage; 
		}
	}
}